---
image: quay.io/govcms/govcms-ci
services:
  - "docker:dind"
stages:
  - static
  - preflight
  - integration
  - deploy
variables:
  extends: .variables
  DOCKER_HOST: "tcp://localhost:2375"

##
# Test setups.
#

# Minimal setup without docker, tooling available by default is https://github.com/govCMS/govcms-ci.
.static_template: &static_template
  before_script:
    - composer install
  stage: static

# Minimal setup to execute drush against a working Drupal.
.bootstrap_template: &bootstrap_template
  before_script:
    - |
      docker network prune -f && docker network create amazeeio-network
      docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY

      docker-compose up -d mariadb
      docker-compose up -d cli
      docker-compose ps

      # Re-run composer to account for the fact the /app just got mounted over.
      docker-compose exec -T cli bash -c 'composer install --no-interaction --no-suggest'

      echo "Running govcms-deploy."
      docker-compose exec -T cli ./vendor/bin/govcms-deploy
  stage: preflight

# Setup the full working project for integration tests like Behat.
.full_template: &full_template
  artifacts:
    expire_in: "7 days"
    paths:
      - tests/behat/features/screenshots
  stage: integration
  before_script:
    - |
      docker network prune -f && docker network create amazeeio-network
      docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY

      docker-compose up -d mariadb
      docker-compose up -d
      docker-compose ps

      # Re-run composer to account for the fact the /app just got mounted over.
      docker-compose exec -T cli bash -c 'composer install --no-interaction --no-suggest'

      DATABASE_IMAGE="$CI_REGISTRY_IMAGE/mariadb-drupal-data"

      # A hack to make the manifest check work.
      sed -i "s/^}$/,\"experimental\":\ \"enabled\"}/" ~/.docker/config.json
      EXIT_CODE=0 && docker manifest inspect "$DATABASE_IMAGE" > /dev/null || EXIT_CODE=$?

      if [[ $EXIT_CODE -ne 0 ]]; then
        echo "$DATABASE_IMAGE not found, installing GovCMS"
        docker-compose exec -T cli bash -c 'drush sql-drop'
        if [[ -f "./custom/database-quickstart.sql.gz" ]]; then
            echo "Installing from a database dump."
            gunzip ./custom/database-quickstart.sql.gz
            docker-compose exec -T cli bash -c 'drush sql-cli --yes' < ./custom/database-quickstart.sql
        else
            echo "Installing the default govcms profile."
            docker-compose exec -T cli bash -c 'drush si govcms -y'
        fi
      else
          echo "Using found database image: $DATABASE_IMAGE"
      fi

      echo "Running govcms-deploy."
      docker-compose exec -T cli ./vendor/bin/govcms-deploy
      docker-compose exec -T cli bash -c 'drush status'

##
# Job definitions.
#

# NOTICE: By default, this job must always run because it's a platform
# compliance check. It should be "allow_failure: false" and
# it should not use "extends:". PaaS users can override (docs link).
vet:
  <<: *static_template
  stage: static
  script:
    - composer validate
    - ./vendor/bin/govcms-vet
  when: on_success
  allow_failure: false

lint:
  <<: *static_template
  extends: .job-lint
  # Run all lines together so that they all run even if any fail.
  script:
    - |
      set +exuo pipefail # Linting...
      ./vendor/bin/govcms-lint web/modules/custom
      ./vendor/bin/govcms-lint web/themes/custom

unit:
  <<: *static_template
  extends: .job-unit
  script:
    - ./vendor/bin/govcms-unit --testsuite=unit

# Pre-flight (like a smoke test for general deployability).
preflight:
  <<: *bootstrap_template
  extends: .job-preflight
  stage: preflight
  script:
    - docker-compose exec -T cli bash -c 'drush cim -y'
    - docker-compose exec -T cli bash -c 'drush st'
    - docker-compose exec -T cli bash -c 'drush updatedb:status'

# Integration.
behat:
  <<: *full_template
  extends: .job-behat
  script:
    - docker-compose exec -T test ./vendor/bin/govcms-behat
functional:
  <<: *full_template
  extends: .job-functional
  script:
    - echo "Will run something like docker-compose exec -T test ./vendor/bin/govcms-integration"
audit:
  <<: *full_template
  extends: .job-audit
  script:
    - docker-compose exec -T test ./vendor/bin/govcms-audit

# MRs only.
audit_on_merge:
  <<: *full_template
  extends: .job-audit-on-merge
  script:
    - docker-compose exec -T test ./vendor/bin/govcms-audit
  only:
    - merge_requests
  stage: deploy

# Deploy / summary.
deploy:
  variables:
    GOVCMS_DASHBOARD: "https://dashboard.govcms.gov.au/projects"
  script:
    - echo "Deployment triggered, please see $GOVCMS_DASHBOARD/$CI_PROJECT_NAME/$CI_PROJECT_NAME-$(echo $CI_COMMIT_REF_NAME | sed -e 's/[^[:alnum:]-]/-/g')"
  stage: deploy
